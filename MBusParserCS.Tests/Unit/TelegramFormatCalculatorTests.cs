using System.Reflection;
using MBusParserCS.Calculators;
using MBusParserCS.Calculators.Interfaces;
using MBusParserCS.Messages;
using MBusParserCS.Models;

namespace MBusParserCS.Tests.Unit
{
    [TestClass]
    public sealed class TelegramFormatCalculatorTests
    {
        [TestMethod]
        public void ValidateLengthMbusTestOk()
        {
            Byte[] bytes = new Byte[]{ 0x68, 0x43, 0x43, 0x68, 0x08, 0x01, 0x72, 0x40, 0x69, 0x00, 0x33, 0xE1, 0x0E, 0x03, 0x00, 0x77, 0x08, 0x30, 0x85, 0x2F, 0x2F, 0x03, 0xFD, 0x08, 0x06, 0xC0, 0x00, 0x04, 0xFD, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0x65, 0xAB, 0x09, 0x12, 0x65, 0xBE, 0x09, 0x22, 0x65, 0x3A, 0x09, 0x01, 0xFD, 0x48, 0x25, 0x04, 0x6D, 0x12, 0x10, 0x7E, 0x28, 0x02, 0x7C, 0x01, 0x48, 0x31, 0x00, 0x0F, 0x01, 0xFD, 0x62, 0xB7, 0x01, 0xFD, 0x7B, 0xCA, 0xE2, 0x16};
            TelegramFormatCalculator obj = TelegramFormatCalculator.GetCalculator();
            MethodInfo methodInfo = typeof(TelegramFormatCalculator).GetMethod("ValidateLengthMbus", BindingFlags.NonPublic | BindingFlags.Instance);
            Message result = (Message)methodInfo.Invoke(obj, new object[] { bytes });
            Assert.IsFalse(result.IsError);
        }

        [TestMethod]
        public void ValidateLengthMbusTestError()
        {
            Byte[] bytes = new Byte[] { 0x68, 0x40, 0x40, 0x68, 0x08, 0x01, 0x72, 0x40, 0x69, 0x00, 0x33, 0xE1, 0x0E, 0x03, 0x00, 0x77, 0x08, 0x30, 0x85, 0x2F, 0x2F, 0x03, 0xFD, 0x08, 0x06, 0xC0, 0x00, 0x04, 0xFD, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0x65, 0xAB, 0x09, 0x12, 0x65, 0xBE, 0x09, 0x22, 0x65, 0x3A, 0x09, 0x01, 0xFD, 0x48, 0x25, 0x04, 0x6D, 0x12, 0x10, 0x7E, 0x28, 0x02, 0x7C, 0x01, 0x48, 0x31, 0x00, 0x0F, 0x01, 0xFD, 0x62, 0xB7, 0x01, 0xFD, 0x7B, 0xCA, 0xE2, 0x16 };
            TelegramFormatCalculator obj = TelegramFormatCalculator.GetCalculator();
            MethodInfo methodInfo = typeof(TelegramFormatCalculator).GetMethod("ValidateLengthMbus", BindingFlags.NonPublic | BindingFlags.Instance);
            Message result = (Message)methodInfo.Invoke(obj, new object[] { bytes });
            Assert.IsTrue(result.IsError);
            Assert.IsTrue(result.GetErrorDescriptions() == "M-Bus invalid datagram length");
        }

        [TestMethod]
        public void ValidateLengthWmbusFormatATestOk()
        {
            Byte[] bytes = new Byte[] { 0x2E, 0x44, 0x01, 0x06, 0x15, 0x30, 0x83, 0x96, 0x01, 0x02, 0xA6, 0xD3, 0x7A, 0xE0, 0x10, 0x20, 0x05, 0x7F, 0xD2, 0x5E, 0xC4, 0x65, 0x31, 0xD5, 0x98, 0x3A, 0xD5, 0x7C, 0x77, 0x82, 0xE1, 0x40, 0xAC, 0x48, 0xFC, 0x41, 0x79, 0x55, 0x95, 0x95, 0x13, 0x4F, 0x9E, 0x38, 0xE8, 0xC9, 0x3A, 0x1E, 0x5E, 0x63, 0xD8, 0x6C, 0x98, 0x39, 0x5C };
            TelegramFormatCalculator obj = TelegramFormatCalculator.GetCalculator();
            MethodInfo methodInfo = typeof(TelegramFormatCalculator).GetMethod("ValidateLengthWmbusFormatA", BindingFlags.NonPublic | BindingFlags.Instance);
            Message result = (Message)methodInfo.Invoke(obj, new object[] { bytes });
            Assert.IsFalse(result.IsError);
        }

        [TestMethod]
        public void ValidateLengthWmbusFormatATestError()
        {
            Byte[] bytes = new Byte[] { 0x1E, 0x44, 0x01, 0x06, 0x15, 0x30, 0x83, 0x96, 0x01, 0x02, 0xA6, 0xD3, 0x7A, 0xE0, 0x10, 0x20, 0x05, 0x7F, 0xD2, 0x5E, 0xC4, 0x65, 0x31, 0xD5, 0x98, 0x3A, 0xD5, 0x7C, 0x77, 0x82, 0xE1, 0x40, 0xAC, 0x48, 0xFC, 0x41, 0x79, 0x55, 0x95, 0x95, 0x13, 0x4F, 0x9E, 0x38, 0xE8, 0xC9, 0x3A, 0x1E, 0x5E, 0x63, 0xD8, 0x6C, 0x98, 0x39, 0x5C };
            TelegramFormatCalculator obj = TelegramFormatCalculator.GetCalculator();
            MethodInfo methodInfo = typeof(TelegramFormatCalculator).GetMethod("ValidateLengthWmbusFormatA", BindingFlags.NonPublic | BindingFlags.Instance);
            Message result = (Message)methodInfo.Invoke(obj, new object[] { bytes });
            Assert.IsTrue(result.IsError);
            Assert.IsTrue(result.GetErrorDescriptions() == "wM-Bus invalid datagram length");
        }

        [TestMethod]
        public void ValidateCsTestOk()
        {
            Byte[] bytes = new Byte[] { 0x08, 0x01, 0x72, 0x40, 0x69, 0x00, 0x33, 0xE1, 0x0E, 0x03, 0x00, 0x77, 0x08, 0x30, 0x85, 0x2F, 0x2F, 0x03, 0xFD, 0x08, 0x06, 0xC0, 0x00, 0x04, 0xFD, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0x65, 0xAB, 0x09, 0x12, 0x65, 0xBE, 0x09, 0x22, 0x65, 0x3A, 0x09, 0x01, 0xFD, 0x48, 0x25, 0x04, 0x6D, 0x12, 0x10, 0x7E, 0x28, 0x02, 0x7C, 0x01, 0x48, 0x31, 0x00, 0x0F, 0x01, 0xFD, 0x62, 0xB7, 0x01, 0xFD, 0x7B, 0xCA, 0xE2 };
            TelegramFormatCalculator obj = TelegramFormatCalculator.GetCalculator();
            MethodInfo methodInfo = typeof(TelegramFormatCalculator).GetMethod("ValidateCs", BindingFlags.NonPublic | BindingFlags.Instance);
            Message result = (Message)methodInfo.Invoke(obj, new object[] { bytes });
            Assert.IsFalse(result.IsError);
        }

        [TestMethod]
        public void ValidateCsTestError()
        {
            Byte[] bytes = new Byte[] { 0x00, 0x01, 0x72, 0x40, 0x69, 0x00, 0x33, 0xE1, 0x0E, 0x03, 0x00, 0x77, 0x08, 0x30, 0x85, 0x2F, 0x2F, 0x03, 0xFD, 0x08, 0x06, 0xC0, 0x00, 0x04, 0xFD, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0x65, 0xAB, 0x09, 0x12, 0x65, 0xBE, 0x09, 0x22, 0x65, 0x3A, 0x09, 0x01, 0xFD, 0x48, 0x25, 0x04, 0x6D, 0x12, 0x10, 0x7E, 0x28, 0x02, 0x7C, 0x01, 0x48, 0x31, 0x00, 0x0F, 0x01, 0xFD, 0x62, 0xB7, 0x01, 0xFD, 0x7B, 0xCA, 0xE2 };
            TelegramFormatCalculator obj = TelegramFormatCalculator.GetCalculator();
            MethodInfo methodInfo = typeof(TelegramFormatCalculator).GetMethod("ValidateCs", BindingFlags.NonPublic | BindingFlags.Instance);
            Message result = (Message)methodInfo.Invoke(obj, new object[] { bytes });
            var gg = result.GetErrorDescriptions();
            Assert.IsTrue(result.IsError);
            Assert.IsTrue(result.GetErrorDescriptions() == "M-Bus invalid checksum: 0xE2 vs 0xDA");
        }

        [TestMethod]
        public void ValidateCrcWmbusFormatAOk()
        {
            Byte[] bytes = new Byte[] { 0x2E, 0x44, 0x01, 0x06, 0x15, 0x30, 0x83, 0x96, 0x01, 0x02, 0xA6, 0xD3, 0x7A, 0xE0, 0x10, 0x20, 0x05, 0x7F, 0xD2, 0x5E, 0xC4, 0x65, 0x31, 0xD5, 0x98, 0x3A, 0xD5, 0x7C, 0x77, 0x82, 0xE1, 0x40, 0xAC, 0x48, 0xFC, 0x41, 0x79, 0x55, 0x95, 0x95, 0x13, 0x4F, 0x9E, 0x38, 0xE8, 0xC9, 0x3A, 0x1E, 0x5E, 0x63, 0xD8, 0x6C, 0x98, 0x39, 0x5C };
            TelegramFormatCalculator obj = TelegramFormatCalculator.GetCalculator();
            MethodInfo methodInfo = typeof(TelegramFormatCalculator).GetMethod("ValidateCrcWmbusFormatA", BindingFlags.NonPublic | BindingFlags.Instance);
            Message result = (Message)methodInfo.Invoke(obj, new object[] { bytes });
            Assert.IsFalse(result.IsError);
        }

        [TestMethod]
        public void ValidateCrcWmbusFormatAError()
        {
            Byte[] bytes = new Byte[] { 0x2E, 0x44, 0x01, 0x06, 0x15, 0x30, 0x83, 0x90, 0x01, 0x02, 0xA6, 0xD3, 0x7A, 0xE0, 0x10, 0x20, 0x05, 0x7F, 0xD2, 0x5E, 0xC4, 0x65, 0x31, 0xD5, 0x98, 0x3A, 0xD5, 0x7C, 0x77, 0x82, 0xE1, 0x40, 0xAC, 0x48, 0xFC, 0x41, 0x79, 0x55, 0x95, 0x95, 0x13, 0x4F, 0x9E, 0x38, 0xE8, 0xC9, 0x3A, 0x1E, 0x5E, 0x63, 0xD8, 0x6C, 0x98, 0x39, 0x5C };
            TelegramFormatCalculator obj = TelegramFormatCalculator.GetCalculator();
            MethodInfo methodInfo = typeof(TelegramFormatCalculator).GetMethod("ValidateCrcWmbusFormatA", BindingFlags.NonPublic | BindingFlags.Instance);
            Message result = (Message)methodInfo.Invoke(obj, new object[] { bytes });
            Assert.IsTrue(result.IsError);
            Assert.IsTrue(result.GetErrorDescriptions() == "wM-Bus invalid crc: 0xA6 0xD3 vs 0x81 0xE5");
        }

        [TestMethod]
        public void CalculateTelegramFormatLongFrameMBusOk()
        {
            Byte[] bytes = new Byte[] { 0x68, 0x43, 0x43, 0x68, 0x08, 0x01, 0x72, 0x40, 0x69, 0x00, 0x33, 0xE1, 0x0E, 0x03, 0x00, 0x77, 0x08, 0x30, 0x85, 0x2F, 0x2F, 0x03, 0xFD, 0x08, 0x06, 0xC0, 0x00, 0x04, 0xFD, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0x65, 0xAB, 0x09, 0x12, 0x65, 0xBE, 0x09, 0x22, 0x65, 0x3A, 0x09, 0x01, 0xFD, 0x48, 0x25, 0x04, 0x6D, 0x12, 0x10, 0x7E, 0x28, 0x02, 0x7C, 0x01, 0x48, 0x31, 0x00, 0x0F, 0x01, 0xFD, 0x62, 0xB7, 0x01, 0xFD, 0x7B, 0xCA, 0xE2, 0x16 };
            Queue<Byte> frame = new(bytes);
            ITelegramFormatCalculator obj = TelegramFormatCalculator.GetCalculator();
            TelegramFormatMessage result = obj.CalculateTelegramFormat(ref frame);
            Assert.IsFalse(result.IsError);
            Assert.IsTrue(result.TelegramFormat == TelegramFormat.LongFrameMBus);
        }

        [TestMethod]
        public void CalculateTelegramFormatLongFrameMBusError()
        {
            Byte[] bytes = new Byte[] { 0x68, 0x43, 0x43, 0x68, 0x08, 0x01, 0x72, 0x40, 0x69, 0x00, 0x33, 0xE1, 0x0E, 0x03, 0x00, 0x77, 0x08, 0x30, 0x80, 0x2F, 0x2F, 0x03, 0xFD, 0x08, 0x06, 0xC0, 0x00, 0x04, 0xFD, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0x65, 0xAB, 0x09, 0x12, 0x65, 0xBE, 0x09, 0x22, 0x65, 0x3A, 0x09, 0x01, 0xFD, 0x48, 0x25, 0x04, 0x6D, 0x12, 0x10, 0x7E, 0x28, 0x02, 0x7C, 0x01, 0x48, 0x31, 0x00, 0x0F, 0x01, 0xFD, 0x62, 0xB7, 0x01, 0xFD, 0x7B, 0xCA, 0xE2, 0x16 };
            Queue<Byte> frame = new(bytes);
            ITelegramFormatCalculator obj = TelegramFormatCalculator.GetCalculator(); TelegramFormatCalculator.GetCalculator();
            TelegramFormatMessage result = obj.CalculateTelegramFormat(ref frame);
            Assert.IsTrue(result.IsError);
            Assert.IsTrue(result.TelegramFormat == TelegramFormat.Unknown);
            Assert.IsTrue(result.GetErrorDescriptions() == "M-Bus invalid checksum: 0xE2 vs 0xDD");
        }

        [TestMethod]
        public void CalculateTelegramFormatLongFrameWMBusFormatAOk()
        {
            Byte[] bytes = new Byte[] { 0x2E, 0x44, 0x01, 0x06, 0x15, 0x30, 0x83, 0x96, 0x01, 0x02, 0xA6, 0xD3, 0x7A, 0xE0, 0x10, 0x20, 0x05, 0x7F, 0xD2, 0x5E, 0xC4, 0x65, 0x31, 0xD5, 0x98, 0x3A, 0xD5, 0x7C, 0x77, 0x82, 0xE1, 0x40, 0xAC, 0x48, 0xFC, 0x41, 0x79, 0x55, 0x95, 0x95, 0x13, 0x4F, 0x9E, 0x38, 0xE8, 0xC9, 0x3A, 0x1E, 0x5E, 0x63, 0xD8, 0x6C, 0x98, 0x39, 0x5C };
            Queue<Byte> frame = new(bytes);
            ITelegramFormatCalculator obj = TelegramFormatCalculator.GetCalculator();
            TelegramFormatMessage result = obj.CalculateTelegramFormat(ref frame);
            Assert.IsFalse(result.IsError);
            Assert.IsTrue(result.TelegramFormat == TelegramFormat.LongFrameWMBusFormatA);
        }

        [TestMethod]
        public void CalculateTelegramFormatLongFrameWMBusFormatAError()
        {
            Byte[] bytes = new Byte[] { 0x1E, 0x44, 0x01, 0x06, 0x15, 0x30, 0x83, 0x96, 0x01, 0x02, 0xA6, 0xD3, 0x7A, 0xE0, 0x10, 0x20, 0x05, 0x7F, 0xD2, 0x5E, 0xC4, 0x65, 0x31, 0xD5, 0x98, 0x3A, 0xD5, 0x7C, 0x77, 0x82, 0xE1, 0x40, 0xAC, 0x48, 0xFC, 0x41, 0x79, 0x55, 0x95, 0x95, 0x13, 0x4F, 0x9E, 0x38, 0xE8, 0xC9, 0x3A, 0x1E, 0x5E, 0x63, 0xD8, 0x6C, 0x98, 0x39, 0x5C };
            Queue<Byte> frame = new(bytes);
            ITelegramFormatCalculator obj = TelegramFormatCalculator.GetCalculator();
            TelegramFormatMessage result = obj.CalculateTelegramFormat(ref frame);
            Assert.IsTrue(result.IsError);
            Assert.IsTrue(result.TelegramFormat == TelegramFormat.Unknown);
            Assert.IsTrue(result.GetErrorDescriptions() == "wM-Bus invalid datagram length");
        }
        [TestMethod]
        public void CalculateTelegramError()
        {
            Byte[] bytes = new Byte[] { 0x68, 0x43, 0x43 };
            Queue<Byte> frame = new(bytes);
            ITelegramFormatCalculator obj = TelegramFormatCalculator.GetCalculator();
            TelegramFormatMessage result = obj.CalculateTelegramFormat(ref frame);
            Assert.IsTrue(result.IsError);
            Assert.IsTrue(result.TelegramFormat == TelegramFormat.Unknown);
            Assert.IsTrue(result.GetErrorDescriptions() == "Telegram format calculator error");
        }
    }
}
